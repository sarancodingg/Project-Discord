import nextcord, json, re, httpx, certifi, datetime, os
from nextcord.ext import commands
from nextcord.ui import Button, View
bot = commands.Bot(command_prefix='nyx!',help_command=None,intents=nextcord.Intents.all())
config = json.load(open('config.json', 'r', encoding='utf-8'))



def count_buyers():
    with open('./database/users.json', 'r', encoding='utf-8') as file:
        users = json.load(file)
    buyers_count = sum(1 for user in users.values() if any("payment" in transaction for transaction in user.get('transaction', [])))
    return buyers_count

def count_stock_items(file_path):
    if os.path.exists(file_path):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        with open(file_path, 'r', encoding='utf-8') as file:
            return len(file.readlines())
    else:
        return "File does not exist."  # ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ error ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°

class BuyerCountView(nextcord.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(BuyerCountButton())

class BuyerCountButton(nextcord.ui.Button):
    def __init__(self):
        super().__init__(label="‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠", style=nextcord.ButtonStyle.green, custom_id="count_buyers")

    async def callback(self, interaction: nextcord.Interaction):
        buyer_count = count_buyers()
        await interaction.response.send_message(f"‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß {buyer_count} ‡∏Ñ‡∏ô", ephemeral=True)


channel_id = 1206973039313420308
channel = bot.get_channel(channel_id)
class StockCheckSelect(nextcord.ui.Select):
    def __init__(self):
        options = [
            nextcord.SelectOption(label='‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå1‡∏ß‡∏±‡∏ô', description='‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏¢', value='1.txt'),
            nextcord.SelectOption(label='‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå3‡∏ß‡∏±‡∏ô', description='‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏¢', value='3.txt'),
            nextcord.SelectOption(label='‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå7‡∏ß‡∏±‡∏ô', description='‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏¢', value='7.txt'),
            nextcord.SelectOption(label='‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå14‡∏ß‡∏±‡∏ô', description='‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏¢', value='14.txt'),
            nextcord.SelectOption(label='‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏µ‡∏¢‡πå30‡∏ß‡∏±‡∏ô', description='‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏¢', value='30.txt'),
            # ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ...
        ]
        super().__init__(placeholder='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ', min_values=1, max_values=1, options=options)

    async def callback(self, interaction: nextcord.Interaction):
        # ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ï‡πá‡∏≠‡∏Å
        file_path = self.values[0]
        stock_count = count_stock_items(file_path)
        await interaction.response.send_message(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏ô {file_path}‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {stock_count}‡∏Ñ‡∏µ‡∏¢‡πå", ephemeral=True)

def get_top_donors():
    with open('./database/users.json', 'r', encoding='utf-8') as file:
        users = json.load(file)
    sorted_users = sorted(users.items(), key=lambda x: x[1]['all-point'], reverse=True)[:3]
    return sorted_users

class TopDonorsView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # View does not expire

        # Add a button to view top donors
        self.add_item(nextcord.ui.Button(label="Check Top Donors", style=nextcord.ButtonStyle.green, custom_id="check_top_donors"))

    # Callback for the button, you must include interaction parameter
   
    async def check_top_donors(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        top_donors = get_top_donors()
        message = "üèÜ **Top Donors** üèÜ\n"
        for index, (user_id, data) in enumerate(top_donors, start=1):
            message += f"**Rank {index}**: <@{user_id}> with {data['all-point']} points\n"
        await interaction.response.send_message(message, ephemeral=True)

@bot.command()
async def top_donors_button(ctx):
    """Command to display a button for checking top donors."""
    view = TopDonorsView()
    await ctx.send("Click the button to check the top donors:", view=view)









class sellroleView(nextcord.ui.View):
    
    def __init__(self, roleData: dict, day: str):
        super().__init__(timeout=None)
        self.roleData = roleData
        self.day = day  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ day

    @nextcord.ui.button(label='[üü¢] ‡∏¢‡∏µ‡∏ô‡∏¢‡∏±‡∏ô', custom_id='already', style=nextcord.ButtonStyle.green, row=1)
    async def already(self, button: nextcord.Button, interaction: nextcord.Interaction):
        # ‡πÉ‡∏ä‡πâ os.path.join ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£
        file_path = os.path.join('./', f'{self.day}.txt')
        if not os.path.exists(file_path) or os.stat(file_path).st_size == 0:
            await interaction.response.send_message(embed=nextcord.Embed(description='‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ï‡∏¥‡∏°', color=nextcord.Color.red()))
            return
        
        userJSON = json.load(open('./database/users.json', 'r', encoding='utf-8'))
        if (str(interaction.user.id) not in userJSON):
            embed = nextcord.Embed(description='‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', color=nextcord.Color.red())
        else:
            if (userJSON[str(interaction.user.id)]['point'] >= self.roleData['price']):
                userJSON[str(interaction.user.id)]['point'] -= self.roleData['price']
                userJSON[str(interaction.user.id)]['transaction'].append({
                    "payment": {
                        "product": self.roleData['name'],
                        "time": str(datetime.datetime.now())
                    }
                })
                json.dump(userJSON, open('./database/users.json', 'w', encoding='utf-8'), indent=4, ensure_ascii=False)
            
                role = nextcord.utils.get(interaction.user.guild.roles, id = self.roleData['roleId'])
                try:
                    await interaction.user.add_roles(role)
                except Exception as error:
                    print(f'FAIL TO ADD ROLE TO {interaction.user} - {str(error)}')
                topupLogEmbed = nextcord.Embed(
                    title='‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ä‡πá‡∏ÑDm',
                    description=f'''
    üë©üèª ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ : <@{interaction.user.id}>
    üí∏ ‡∏£‡∏≤‡∏Ñ‡∏≤ : {self.roleData['price']}
    üéá ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ : {self.roleData['name']}
    üëâ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: <#1145222034608099368>
    ''',
                    color=nextcord.Color.green()
                )
                if (interaction.user.avatar):
                    topupLogEmbed.set_thumbnail(url=interaction.user.avatar.url)
                try:
                    await bot.get_channel(config['topuplog']).send(embed=topupLogEmbed)
                except:
                    print('FAIL TO SEND MESSAGE TOPUP LOG')
                key = open(f"./{self.day}.txt", "r").read().split('\n', 1)[0]
                x = open(f"./{self.day}.txt", "r").readlines()
                f = open(f"./{self.day}.txt", "w")
                for line in x:
                    if line.strip("\n") != key:
                        f.write(line)
                channelDM = await interaction.user.create_dm()
              

                if (channelDM):
                    await channelDM.send(embed=nextcord.Embed(description=f"‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Ñ‡∏∑‡∏≠ {key}",color=0x00ff00))
                    
                embed = nextcord.Embed(description='‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', color=nextcord.Color.green())
            else:
                embed = nextcord.Embed(description=f'‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Ç‡∏≤‡∏î‡∏≠‡∏µ‡∏Å ({self.roleData["price"] - userJSON[str(interaction.user.id)]["point"]})', color=nextcord.Color.red())
        await interaction.response.edit_message(embed=embed, view=None)

    @nextcord.ui.button(
        label='[üî¥] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        custom_id='cancel',
        style=nextcord.ButtonStyle.red,
        row=1
    )
    async def cancel(self, button: nextcord.Button, interaction: nextcord.Interaction):
        return await interaction.response.edit_message(content='‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',embed=None, view=None)
class LeaderboardView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # timeout=None ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á view ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏

class roleSelect(nextcord.ui.Select):

    def __init__(self):
        options = []
        i = 0
        for role in config['roleSettings']:
            options.append(nextcord.SelectOption(
                value=str(role['name']).replace('‡∏Ñ‡∏µ‡∏¢‡πå ', '').replace(' ‡∏ß‡∏±‡∏ô', ''),
                label=str(role['name']),
                description=str(role['description']),
                emoji=role['emoji']
            ))
            i += 1
        
        super().__init__(custom_id='roleSelect', placeholder='üí∏ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠', min_values=1, max_values=1, options=options)

    async def callback(self, interaction: nextcord.Interaction):
        await interaction.response.defer(ephemeral=True)
        for role in config['roleSettings']:
            if role['name'].replace('‡∏Ñ‡∏µ‡∏¢‡πå ', '').replace(' ‡∏ß‡∏±‡∏ô', '') == self.values[0]:
                embed = nextcord.Embed()
                embed.description = f'''
**‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠** {role['name']}
'''
                return await interaction.send(embed=embed, view=sellroleView(roleData=role,day=self.values[0]), ephemeral=True)

class topupModal(nextcord.ui.Modal):
 
    def __init__(self):
        super().__init__(title='‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', timeout=None, custom_id='topup-modal')
        self.link = nextcord.ui.TextInput(
            label = '‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤',
            placeholder = 'https://gift.truemoney.com/campaign/?v=xxxxxxxxxxxxxxx',
            style = nextcord.TextInputStyle.short,
            required = True
        )
        self.add_item(self.link)

    async def callback(self, interaction: nextcord.Interaction):
        link = str(self.link.value).replace(' ', '')
        message = await interaction.response.send_message(content='checking.', ephemeral=True)
        if re.match(r'https:\/\/gift\.truemoney\.com\/campaign\/\?v=+[a-zA-Z0-9]{18}', link):
            voucher_hash = link.split('?v=')[1]
            response = httpx.post(
                url = f'https://gift.truemoney.com/campaign/vouchers/{voucher_hash}/redeem',
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/8a0.0.3987.149 Safari/537.36'
                },
                json = {
                    'mobile': config['phoneNumber'],
                    'voucher_hash': f'{voucher_hash}'
                },
                verify=certifi.where(),
            )
            if response.status_code == 200 and response.json()['status']['code'] == 'SUCCESS':
                data = response.json()
                amount = int(float(data['data']['my_ticket']['amount_baht']))
                userJSON = json.load(open('./database/users.json', 'r', encoding='utf-8'))
                if (str(interaction.user.id) not in userJSON):
                    userJSON[str(interaction.user.id)] = {
                        "userId": interaction.user.id,
                        "point": amount,
                        "all-point": amount,
                        "transaction": [
                            {
                                "topup": {
                                    "url": link,
                                    "amount": amount,
                                    "time": str(datetime.datetime.now())
                                }
                            }
                        ]
                    }
                else:
                    userJSON[str(interaction.user.id)]['point'] += amount
                    userJSON[str(interaction.user.id)]['all-point'] += amount
                    userJSON[str(interaction.user.id)]['transaction'].append({
                        "topup": {
                            "url": link,
                            "amount": amount,
                            "time": str(datetime.datetime.now())
                        }
                    })
                json.dump(userJSON, open('./database/users.json', 'w', encoding='utf-8'), indent=4, ensure_ascii=False)
                embed = nextcord.Embed(description='‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', color=nextcord.Color.green())
            else:
                embed = nextcord.Embed(description='‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', color=nextcord.Color.red())
        else:
            embed = nextcord.Embed(description='‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', color=nextcord.Color.red())
        await message.edit(content=None,embed=embed)
        


class StockCheckView(View):
    def __init__(self):
        super().__init__()
        self.add_item(StockCheckSelect())  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Dropdown ‡πÉ‡∏ô View

   
class topupView(nextcord.ui.View):

    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(roleSelect())
    
    @nextcord.ui.button(label='[üí∏] ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', style=nextcord.ButtonStyle.green, custom_id='topup_button')
    async def topup_button_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        # This line sends the modal to the user
        await interaction.response.send_modal(topupModal())

    @nextcord.ui.button(
        label='[üí≥] ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏¥‡∏ô',
        custom_id='balance',
        style=nextcord.ButtonStyle.green,
        row=1
    )




    
    async def balance(self, button: nextcord.Button, interaction: nextcord.Interaction):
        userJSON = json.load(open('./database/users.json', 'r', encoding='utf-8'))
        if (str(interaction.user.id) not in userJSON):
            embed = nextcord.Embed(description='‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', color=nextcord.Color.red())
        else:
            embed = nextcord.Embed(description=f'‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {userJSON[str(interaction.user.id)]["point"]}', color=nextcord.Color.green())
        return await interaction.response.send_message(embed=embed, ephemeral=True)


    @nextcord.ui.button(
        label='[üè¶] ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ôQRCODE',
        custom_id='tanakan',
        style=nextcord.ButtonStyle.red,
        row=1
    )
    async def tanakan(self, button: nextcord.Button, interaction: nextcord.Interaction):
        embed = nextcord.Embed(description='QRCODE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ<#1206966906511298570>‡∏´‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ', color=nextcord.Color.red())
        embed.set_image(url='https://cdn.discordapp.com/attachments/1167689456619368458/1206973034272133210/1707835170080.png?ex=65ddf43b&is=65cb7f3b&hm=4253c026bcc00a28140138a83ccbb7febb4f7ddeb22ebf5131aeae883836c288&')
        return await interaction.response.send_message(embed=embed, ephemeral=True)
  
  
  
    @nextcord.ui.button(label="Check Stock", style=nextcord.ButtonStyle.green)
    async def prompt_stock_check(self, button: Button, interaction: nextcord.Interaction):
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° Dropdown ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ï‡πá‡∏≠‡∏Å
        await interaction.response.send_message("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ:", view=StockCheckView(), ephemeral=True)



   # @nextcord.ui.button(label="‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô", style=nextcord.ButtonStyle.green, custom_id="‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô")
    @nextcord.ui.button(label="‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô", style=nextcord.ButtonStyle.green, custom_id="top_donors_button")
    async def check_top_donors(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        top_donors = get_top_donors()
        message = "üèÜ **Top Donors** üèÜ\n"
        for index, (user_id, data) in enumerate(top_donors, start=1):
            message += f"**Rank {index}**: <@{user_id}> with {data['all-point']} points\n"
        await interaction.response.send_message(message, ephemeral=True)
    
   
    @nextcord.ui.button(label="‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠", style=nextcord.ButtonStyle.green, custom_id="check_buyers")
    async def check_buyers(self, button: Button, interaction: nextcord.Interaction):
        buyer_count = count_buyers()
        await interaction.response.send_message(f"‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß {buyer_count} ‡∏Ñ‡∏ô", ephemeral=True)

@bot.command()
async def show_buyers(ctx):
    view = BuyerCountView()
    await ctx.send("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠", view=view)

@bot.command()
async def show_buyer_count(ctx):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á View ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠"""
    view = BuyerCountView()
    await ctx.send("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠", view=view)



@bot.command()
async def show_leaderboard(ctx):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ Top Donator"""
    view = LeaderboardView()
    await ctx.send("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", view=view)

@bot.command()
async def checkstock(ctx):
    view = StockCheckView()
    await ctx.send("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'Check Stock' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πá‡∏≠‡∏Å:", view=view)
    

    

@bot.event
async def on_ready():
    bot.add_view(topupView())
    print(f'LOGIN AS {bot.user}')
    print(f"")

@bot.slash_command(name='setup', description='setup', guild_ids=[config['serverId']])
async def setup(interaction: nextcord.Interaction):
    if (interaction.user.id not in config['ownerIds']):
        return await interaction.response.send_message(content='‡∏°‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥', ephemeral=True)
    embed = nextcord.Embed()
    embed.description = f'''
üßß ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ üßß

> ‡∏£‡∏≤‡∏¢‡∏£‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
'''
    embed.set_image(url='https://cdn.discordapp.com/attachments/970624157966540851/1030754839602397264/unknown_3.jpg')
    embed.color = nextcord.Color.green()
    await interaction.channel.send(embed=embed, view=topupView())
    await interaction.response.send_message(content='success', ephemeral=True)

class AddStock(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå")
        self.day = nextcord.ui.TextInput(
            label="‡∏ß‡∏±‡∏ô",
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.key = nextcord.ui.TextInput(
            label="‡∏Ñ‡∏µ‡∏¢‡πå",
            required=True,
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.day)
        self.add_item(self.key)
    async def callback(self, interaction: nextcord.Interaction):
        f = open(f'./{self.day.value}.txt','a')
        key = self.key.value
        if key in open(f'./{self.day.value}.txt','r').read():
            await interaction.response.send_message(embed=nextcord.Embed(description=f"‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå `{key}` ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô database ‡πÅ‡∏•‡πâ‡∏ß!",color=0xff0000),ephemeral=True)
        else:
            if len(open(f'./{self.day.value}.txt','r').readlines()) == 0:
                f.write(key)
                await interaction.response.send_message(embed=nextcord.Embed(description=f"‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå `{key}` ‡∏•‡∏á database ‡πÅ‡∏•‡πâ‡∏ß!",color=0x00ff00),ephemeral=True)
            else:
                f.write('\n')
                f.write(key)
                await interaction.response.send_message(embed=nextcord.Embed(description=f"‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå `{key}` ‡∏•‡∏á database ‡πÅ‡∏•‡πâ‡∏ß!",color=0x00ff00),ephemeral=True)

class RemoveStock(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå")
        self.day = nextcord.ui.TextInput(
            label="‡∏ß‡∏±‡∏ô",
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.key = nextcord.ui.TextInput(
            label="‡∏Ñ‡∏µ‡∏¢‡πå",
            required=True,
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.day)
        self.add_item(self.key)
    async def callback(self, interaction: nextcord.Interaction):
        f = open(f'./{self.day.value}.txt','a')
        key = self.key.value
        if key not in open(f'./{self.day.value}.txt','r').read():
            await interaction.send(embed=nextcord.Embed(description=f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå `{key}` ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô database!",color=0xff0000),ephemeral=True)
        else:
            lines = open(f"./{self.day.value}.txt", "r").readlines()
            f = open(f"./{self.day.value}.txt", "w")
            for line in lines:
                if line.strip("\n") != key:
                    f.write(line)
            await interaction.send(embed=nextcord.Embed(description=f"‡∏•‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå `{key}` ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å database ‡πÅ‡∏•‡πâ‡∏ß!",color=0x00ff00),ephemeral=True)

@bot.slash_command(name='add-stock', description='add stock', guild_ids=[config['serverId']])
async def addStock(interaction: nextcord.Interaction):
    if (interaction.user.id not in config['ownerIds']):
        return await interaction.response.send_message(content='No Permiss', ephemeral=True)
    await interaction.response.send_modal(AddStock())

@bot.slash_command(name='remove-stock', description='remove stock', guild_ids=[config['serverId']])
async def removeStock(interaction: nextcord.Interaction):
    if (interaction.user.id not in config['ownerIds']):
        return await interaction.response.send_message(content='No Permiss', ephemeral=True)
    await interaction.response.send_modal(RemoveStock())

@bot.slash_command(name='add-point', description='add point', guild_ids=[config['serverId']])
async def addPoint(interaction: nextcord.Interaction, member: nextcord.Member, amount: int):
    if (interaction.user.id not in config['ownerIds']):
        return await interaction.response.send_message(content='No Permiss', ephemeral=True)
    userJSON = json.load(open('./database/users.json', 'r', encoding='utf-8'))
    if (str(member.id) not in userJSON):
        userJSON[str(member.id)] = {
            "userId": member.id,
            "point": amount,
            "all-point": amount,
            "transaction": [
                {
                    "admin-add": {
                        "amount": amount,
                        "time": str(datetime.datetime.now())
                    }
                }
            ]
        }
    else:
        userJSON[str(member.id)]['point'] += amount
        userJSON[str(member.id)]['all-point'] += amount
        userJSON[str(member.id)]['transaction'].append({
            "admin-add": {
                "amount": amount,
                "time": str(datetime.datetime.now())
            }
        })
    json.dump(userJSON, open('./database/users.json', 'w', encoding='utf-8'), indent=4, ensure_ascii=False)
    await interaction.response.send_message(content='Success', ephemeral=True)

@bot.slash_command(name='remove-point', description='remove point', guild_ids=[config['serverId']])
async def removePoint(interaction: nextcord.Interaction, member: nextcord.Member, amount: int):
    if (interaction.user.id not in config['ownerIds']):
        return await interaction.response.send_message(content='No Permiss', ephemeral=True)
    userJSON = json.load(open('./database/users.json', 'r', encoding='utf-8'))
    if (str(member.id) not in userJSON):
        userJSON[str(member.id)] = {
            "userId": member.id,
            "point": 0 - amount,
            "all-point": 0,
            "transaction": [
                {
                    "admin-remove": {
                        "amount": amount,
                        "time": str(datetime.datetime.now())
                    }
                }
            ]
        }
    else:
        userJSON[str(member.id)]['point'] -= amount
        userJSON[str(member.id)]['transaction'].append({
            "admin-remove": {
                "amount": amount,
                "time": str(datetime.datetime.now())
            }
        })
    json.dump(userJSON, open('./database/users.json', 'w', encoding='utf-8'), indent=4, ensure_ascii=False)
    await interaction.response.send_message(content='Success', ephemeral=True)

bot.run(config['token'])